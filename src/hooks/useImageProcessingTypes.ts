
import { ProcessedImage } from '@/types/imageProcessing';

export interface UseImageProcessingResult {
  processedImages: ProcessedImage[];
  setProcessedImages: React.Dispatch<React.SetStateAction<ProcessedImage[]>>;
  compressionLevel: number;
  setCompressionLevel: React.Dispatch<React.SetStateAction<number>>;
  maxWidth: number;
  setMaxWidth: React.Dispatch<React.SetStateAction<number>>;
  maxHeight: number;
  setMaxHeight: React.Dispatch<React.SetStateAction<number>>;
  preserveAspectRatio: boolean;
  setPreserveAspectRatio: React.Dispatch<React.SetStateAction<boolean>>;
  isProcessing: boolean;
  processImage: (index: number) => Promise<void>;
  processAllImages: () => void;
  downloadImage: (index: number) => void;
  downloadAllImages: () => void;
  toggleSelectImage: (index: number) => void;
  selectAllImages: (selected: boolean) => void;
  removeBackground: boolean;
  setRemoveBackground: React.Dispatch<React.SetStateAction<boolean>>;
  apiKey: string | null;
  setApiKey: React.Dispatch<React.SetStateAction<string | null>>;
  selfHosted: boolean;
  setSelfHosted: React.Dispatch<React.SetStateAction<boolean>>;
  serverUrl: string;
  setServerUrl: React.Dispatch<React.SetStateAction<string>>;
  backgroundRemovalModel: string;
  setBackgroundRemovalModel: React.Dispatch<React.SetStateAction<string>>;
  backgroundType: string;
  setBackgroundType: React.Dispatch<React.SetStateAction<string>>;
  backgroundColor: string;
  setBackgroundColor: React.Dispatch<React.SetStateAction<string>>;
  backgroundOpacity: number;
  setBackgroundOpacity: React.Dispatch<React.SetStateAction<number>>;
  backgroundImage?: File | null;
  setBackgroundImage?: React.Dispatch<React.SetStateAction<File | null>>;
  kollectItApiKey?: string | null;
  setKollectItApiKey?: React.Dispatch<React.SetStateAction<string | null>>;
  kollectItUploadUrl?: string;
  setKollectItUploadUrl?: React.Dispatch<React.SetStateAction<string>>;
  showBeforeAfter: number | null;
  toggleBeforeAfterView: (index: number | null) => void;
  batchProgress: number;
  totalItemsToProcess: number;
  processedItemsCount: number;
  cancelBatchProcessing: () => void;
  clearImageCache: () => void;
  clearAnalyticsData: () => void;
}
